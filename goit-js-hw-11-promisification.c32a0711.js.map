{"version":3,"sources":["task-js/task-1.js","task-js/task-2.js","task-js/task-3.js","index.js"],"names":["logger","time","console","log","delay","ms","Promise","resolve","reject","setTimeout","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","value","logError","warn","amount","catch"],"mappings":";AAGA,IAAMA,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QACbG,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACzBC,WAAW,WACbF,EAAQF,IACRA,MAMJD,EAAM,KAAMM,KAAKV,GACjBI,EAAM,KAAMM,KAAKV,GACjBI,EAAM,MAAMM,KAAKV;;ACQnB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApBA,IAAMW,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAE1B,OAAA,IAAIV,QAAQ,SAACC,GAIhBA,EAHmBQ,EAASE,IAAI,SAAAC,GAChCA,OAAAA,EAAKN,OAASI,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCL,QAASK,EAAKL,SAAWK,QAM7DlB,EAAS,SAAAmB,GAAgBjB,OAAAA,QAAQkB,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKV,GACrCc,EAAgBH,EAAO,OAAOD,KAAKV;;ACpBnC,IAAMqB,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACf,OAAA,IAAItB,QAAQ,SAACC,EAASC,GACpBJ,IAAAA,EAAQiB,EAA0B,IAAK,KAC7CZ,WAAW,WACWe,KAAKE,SAAW,GAEhCnB,EAAQ,CACLsB,GAAID,EAAYC,GAAIzB,MAAAA,IAG7BI,EAAOoB,EAAYC,KAGnBzB,MAIA0B,EAAa,SAACC,GAClB7B,QAAQC,IAAmB4B,eAAAA,OAAAA,EAAMF,GAAmBE,kBAAAA,OAAAA,EAAM3B,MAA1D,QAGI4B,EAAW,SAAAH,GACf3B,QAAQ+B,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAGFF,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,KAC/BxB,KAAKoB,GACLK,MAAMH,GAETL,EAAgB,CAAEE,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH;;AC7CT,aAFA,QAAA,oBACA,QAAA,oBACA,QAAA","file":"goit-js-hw-11-promisification.c32a0711.js","sourceRoot":"..","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\nconst delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n      resolve(ms)\r\n   }, ms);})\r\n  \r\n};\r\n\r\n// Вызовы функции для проверки\r\n\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms","// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n// ыа принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n   \r\n  return new Promise((resolve) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n      resolve(updatedUsers)\r\n  })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один\r\n// параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n   return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      setTimeout(() => {\r\n         const canProcess = Math.random() > 0.3;\r\n         if (canProcess) {\r\n            resolve({\r\n               id: transaction.id, delay\r\n            });\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n     \r\n   }, delay);})\r\n  \r\n};\r\n\r\nconst logSuccess = (value) => {\r\n  console.log(`Transaction ${value.id} processed in ${value.delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n \r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);","import './task-js/task-1';\r\nimport './task-js/task-2';\r\nimport './task-js/task-3';\r\n\r\n\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n//   return new Promise(resolve => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//       user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n\r\n//     resolve(updatedUsers);\r\n//   });\r\n// };\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// refs.task2.addEventListener('click', e => {\r\n//   toggleUserState(users, 'Mango').then(logger);\r\n//   toggleUserState(users, 'Lux').then(logger);\r\n// });\r\n\r\n// // ==========================================================================================================================>>>>>>\r\n\r\n// // Перепиши функцию makeTransaction() так, чтобы она не использовала\r\n// // callback - функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = transaction => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       const canProcess = Math.random() > 0.3;\r\n\r\n//       if (canProcess) {\r\n//         resolve({ transaction: transaction.id, delay: delay });\r\n//       } else {\r\n//         reject(transaction.id);\r\n//       }\r\n//     }, delay);\r\n//   });\r\n// };\r\n\r\n// const logSuccess = ({ transaction, delay }) => {\r\n//   console.log(`Transaction ${transaction} processed in ${delay}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// refs.task3.addEventListener('click', e => {\r\n//   console.log(\r\n//     makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError),\r\n//   );\r\n\r\n//   console.log(\r\n//     makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError),\r\n//   );\r\n\r\n//   console.log(\r\n//     makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError),\r\n//   );\r\n\r\n//   console.log(\r\n//     makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError),\r\n//   );\r\n// });"]}